"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import math
from typing import List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.repositories.employee import EmployeeRepository
from app.repositories.achievement import AchievementRepository
from app.models.employee import Employee
from app.models.achievement import Achievement
from app.schemas.gamification import GamificationStats


class GamificationService:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, db: AsyncSession):
        self.db = db
        self.employee_repo = EmployeeRepository(db)
        self.achievement_repo = AchievementRepository(db)
        
        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements = [
            {
                "name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
                "description": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è",
                "icon": "üëã",
                "xp_reward": 50,
                "currency_reward": 10,
                "category": "profile"
            },
            {
                "name": "–ú–∞—Å—Ç–µ—Ä –Ω–∞–≤—ã–∫–æ–≤",
                "description": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ 5 –∏–ª–∏ –±–æ–ª–µ–µ –Ω–∞–≤—ã–∫–æ–≤",
                "icon": "üéØ",
                "xp_reward": 100,
                "currency_reward": 25,
                "category": "skills"
            },
            {
                "name": "–û–ø—ã—Ç–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫",
                "description": "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ '–û —Å–µ–±–µ'",
                "icon": "üìù",
                "xp_reward": 75,
                "currency_reward": 15,
                "category": "profile"
            },
            {
                "name": "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å",
                "description": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã",
                "icon": "üíº",
                "xp_reward": 100,
                "currency_reward": 20,
                "category": "experience"
            },
            {
                "name": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π",
                "description": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                "icon": "üéì",
                "xp_reward": 75,
                "currency_reward": 15,
                "category": "education"
            },
            {
                "name": "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "description": "3 –∏–ª–∏ –±–æ–ª–µ–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É",
                "icon": "ü§ñ",
                "xp_reward": 150,
                "currency_reward": 30,
                "category": "ai"
            },
            {
                "name": "–≠–∫—Å–ø–µ—Ä—Ç",
                "description": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 10 —É—Ä–æ–≤–Ω—è",
                "icon": "üèÜ",
                "xp_reward": 500,
                "currency_reward": 100,
                "category": "level"
            },
            {
                "name": "–ü–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É",
                "description": "–ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                "icon": "ü§ñ",
                "xp_reward": 10,
                "currency_reward": 5,
                "category": "ai"
            }
        ]
    
    async def initialize_achievements(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        for achievement_data in self.achievements:
            existing = await self.achievement_repo.get_by_name(achievement_data["name"])
            if not existing:
                await self.achievement_repo.create(achievement_data)
    
    async def add_xp(self, employee: Employee, xp_points: int, reason: str = None) -> Employee:
        """–î–æ–±–∞–≤–∏—Ç—å XP —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
        old_level = employee.level
        employee = await self.employee_repo.update_xp(employee, xp_points)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if employee.level > old_level:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—É—é –≤–∞–ª—é—Ç—É –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            bonus_currency = employee.level * 10
            employee.internal_currency += bonus_currency
            await self.db.commit()
            await self.db.refresh(employee)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        employee_with_all = await self.employee_repo.get_with_all_relations(employee.id)
        if employee_with_all:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º
            await self.check_achievements_safe(employee_with_all)
        
        return employee
    
    async def check_achievements(self, employee: Employee):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        achievements = await self.achievement_repo.get_employee_achievements(employee.id)
        employee_achievement_names = [a.name for a in achievements]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        for achievement_data in self.achievements:
            if achievement_data["name"] in employee_achievement_names:
                continue
            
            if self._check_achievement_condition(employee, achievement_data):
                achievement = await self.achievement_repo.get_by_name(achievement_data["name"])
                if achievement:
                    await self.employee_repo.add_achievement(employee, achievement)
                    employee.xp_points += achievement.xp_reward
                    employee.internal_currency += achievement.currency_reward
                    await self.db.commit()
                    await self.db.refresh(employee)
    
    async def check_achievements_safe(self, employee: Employee):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        achievements = await self.achievement_repo.get_employee_achievements(employee.id)
        employee_achievement_names = [a.name for a in achievements]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        for achievement_data in self.achievements:
            if achievement_data["name"] in employee_achievement_names:
                continue
            
            if self._check_achievement_condition_safe(employee, achievement_data):
                achievement = await self.achievement_repo.get_by_name(achievement_data["name"])
                if achievement:
                    await self.employee_repo.add_achievement(employee, achievement)
                    employee.xp_points += achievement.xp_reward
                    employee.internal_currency += achievement.currency_reward
                    await self.db.commit()
                    await self.db.refresh(employee)
    
    def _check_achievement_condition(self, employee: Employee, achievement_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement_name = achievement_data["name"]
        
        if achievement_name == "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏":
            return bool(employee.full_name and employee.position)
        
        elif achievement_name == "–ú–∞—Å—Ç–µ—Ä –Ω–∞–≤—ã–∫–æ–≤":
            return len(employee.skills) >= 5
        
        elif achievement_name == "–û–ø—ã—Ç–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫":
            return bool(employee.bio and len(employee.bio) > 30)
        
        elif achievement_name == "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å":
            return len(employee.work_experiences) > 0
        
        elif achievement_name == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π":
            return len(employee.educations) > 0
        
        elif achievement_name == "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
            return len(employee.career_requests) >= 3
        
        elif achievement_name == "–≠–∫—Å–ø–µ—Ä—Ç":
            return employee.level >= 10
        
        return False
    
    def _check_achievement_condition_safe(self, employee: Employee, achievement_data: Dict[str, Any]) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement_name = achievement_data["name"]
        
        if achievement_name == "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏":
            return bool(employee.full_name and employee.position)
        
        elif achievement_name == "–ú–∞—Å—Ç–µ—Ä –Ω–∞–≤—ã–∫–æ–≤":
            try:
                return len(employee.skills) >= 5
            except:
                return False
        
        elif achievement_name == "–û–ø—ã—Ç–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫":
            return bool(employee.bio and len(employee.bio) > 50)
        
        elif achievement_name == "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å":
            try:
                return len(employee.work_experiences) > 0
            except:
                return False
        
        elif achievement_name == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π":
            try:
                return len(employee.educations) > 0
            except:
                return False
        
        elif achievement_name == "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
            try:
                return len(employee.career_requests) >= 3
            except:
                return False
        
        elif achievement_name == "–≠–∫—Å–ø–µ—Ä—Ç":
            return employee.level >= 10
        
        return False
    
    async def get_gamification_stats(self, employee: Employee) -> GamificationStats:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        achievements = await self.achievement_repo.get_employee_achievements(employee.id)
        
        # –í—ã—á–∏—Å–ª—è–µ–º XP –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        current_level_xp = (employee.level - 1) ** 2 * 100
        next_level_xp = employee.level ** 2 * 100
        progress_to_next_level = (employee.xp_points - current_level_xp) / (next_level_xp - current_level_xp)
        
        return GamificationStats(
            xp_points=employee.xp_points,
            level=employee.level,
            internal_currency=employee.internal_currency,
            achievements=achievements,
            next_level_xp=next_level_xp,
            progress_to_next_level=min(progress_to_next_level, 1.0)
        )
    
    async def get_leaderboard(self, limit: int = 10) -> List[Employee]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        result = await self.db.execute(
            select(Employee).order_by(Employee.xp_points.desc()).limit(limit)
        )
        return result.scalars().all()
    
    async def award_achievement_by_name(self, employee: Employee, achievement_name: str) -> bool:
        """–ù–∞—á–∏—Å–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        achievements = await self.achievement_repo.get_employee_achievements(employee.id)
        employee_achievement_names = [a.name for a in achievements]
        
        if achievement_name in employee_achievement_names:
            return False  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
        
        # –ò—â–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö
        achievement_data = None
        for ach in self.achievements:
            if ach["name"] == achievement_name:
                achievement_data = ach
                break
        
        if not achievement_data:
            return False  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        achievement = await self.achievement_repo.get_by_name(achievement_name)
        if not achievement:
            return False
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        await self.employee_repo.add_achievement(employee, achievement)
        employee.xp_points += achievement.xp_reward
        employee.internal_currency += achievement.currency_reward
        await self.db.commit()
        await self.db.refresh(employee)
        
        return True
